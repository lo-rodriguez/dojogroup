<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
                                   "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
 <!--EN LA PRIMERA PARTE DE ESTE SQL SE DEBE REEMPLAZAR LA FECHA DE PRUEBA POR LA FECHA DE CORTE-->
 <sql-query name="SQL001">Select ID_STUDENT,SURNAME,SURNAME2,CASE LAST_NAME WHEN  ''  THEN FIRST_NAME ELSE   CONCAT(CONCAT(FIRST_NAME,','),LAST_NAME) END, DOC_ID,CATEGORY 
 From Student  Where STATUS=1 
 ORDER BY SURNAME,SURNAME2,FIRST_NAME,LAST_NAME</sql-query>
 <sql-query name="SQL002">SELECT DATE_FORMAT(p.payday, '%d/%m/%Y'),p.number_of_transfer,c.system_cod_description,FORMAT(p.total_payment,2,'en_US'),DATE_FORMAT(p.payday, '%Y%m%d') 
FROM payments p, system_codes c 
WHERE ( p.type_payment =c.idsystem_codes ) 
AND( CAST(number_of_transfer AS INTEGER) &gt;= :parm1
AND CAST(number_of_transfer AS INTEGER) &lt;= :parm2 )
AND ( P.type_payment =:parm3 OR :parm3 =0) 
ORDER BY p.number_of_transfer,c.system_cod_description ASC</sql-query>
 <sql-query name="SQL003">SELECT FORMAT(sum(p.total_payment),2,'en_US') 
FROM payments p
WHERE 
( CAST(number_of_transfer AS INTEGER) &gt;= :parm1
AND CAST(number_of_transfer AS INTEGER) &lt;= :parm2 )
AND ( P.type_payment =:parm3 OR :parm3 =0)</sql-query>
 <sql-query name="SQL004">SELECT 
DATE_FORMAT(P.PAYDAY, '%d/%m/%Y') AS DAY_PAYMENT, 
CONCAT(CONCAT(CONCAT(CONCAT(S.FIRST_NAME,','),S.SURNAME),','),S.SURNAME2) AS NAME,
P.NUMBER_OF_TRANSFER AS RECEIPT_NUMBER,
C.SYSTEM_COD_DESCRIPTION AS TYPE_PRODUCT, 
TP.SYSTEM_COD_DESCRIPTION AS TYPE_PAYMENT,
FORMAT(SUM(D.TAX+D.PAYMENT),2,'en_US') AS PAYMENT, 
DATE_FORMAT(P.PAYDAY, '%Y%m%d') AS INT_DAY_PAYMENT 
FROM STUDENT S, DETAIL_PAYMENTS D,PAYMENTS P, SYSTEM_CODES C,PRODUCTS PR,SYSTEM_CODES TP
WHERE S.ID_STUDENT = D.ID_STUDENT
AND D.ID_PAYMENT = P.ID_PAYMENT
AND D.ID_PRODUCT = PR.ID_PRODUCT 
AND PR.TYPE = C.IDSYSTEM_CODES
AND P.TYPE_PAYMENT = TP.IDSYSTEM_CODES
AND P.PAYDAY &gt;= :parm1
AND P.PAYDAY &lt;= :parm2 
AND (PR.ID_PRODUCT = :parm3 OR :parm3 =0)
GROUP BY P.PAYDAY , 
CONCAT(CONCAT(CONCAT(CONCAT(S.FIRST_NAME,' '),S.SURNAME),','),S.SURNAME2),
P.NUMBER_OF_TRANSFER,C.SYSTEM_COD_DESCRIPTION,TP.SYSTEM_COD_DESCRIPTION
ORDER BY P.PAYDAY ASC,CAST(RECEIPT_NUMBER AS INTEGER) ASC</sql-query>
 <sql-query name="SQL005">SELECT 
FORMAT(SUM(D.TAX+D.PAYMENT),2,'en_US') AS PAYMENT 
FROM  DETAIL_PAYMENTS D,PAYMENTS P,PRODUCTS PR
WHERE D.ID_PAYMENT = P.ID_PAYMENT
AND D.ID_PRODUCT = PR.ID_PRODUCT 
AND P.PAYDAY &gt;= :parm1
AND P.PAYDAY &lt;= :parm2 
AND (PR.ID_PRODUCT = :parm3 OR :parm3 =0)</sql-query>
 <sql-query name="SQL006">SELECT 
DATE_FORMAT(P.PAYDAY, '%d/%m/%Y') AS DAY_PAYMENT, 
CASE S.LAST_NAME WHEN  '' THEN 
 CONCAT(CONCAT(CONCAT(CONCAT(S.SURNAME,','),S.SURNAME2),','),S.FIRST_NAME)
 ELSE
CONCAT( CONCAT(CONCAT(CONCAT(CONCAT(CONCAT(S.SURNAME,','),S.SURNAME2),','),S.FIRST_NAME),' '),S.LAST_NAME) END AS NAME,
P.NUMBER_OF_TRANSFER AS RECEIPT_NUMBER,
C.SYSTEM_COD_DESCRIPTION AS TYPE_PRODUCT, 
TP.SYSTEM_COD_DESCRIPTION AS TYPE_PAYMENT,
FORMAT(SUM(D.TAX+D.PAYMENT),2,'en_US') AS PAYMENT_VIEW,
SUM(D.TAX+D.PAYMENT) AS  PAYMENT,
DATE_FORMAT(P.PAYDAY, '%Y%m%d') AS INT_DAY_PAYMENT,D.COMMENT 
FROM STUDENT S, DETAIL_PAYMENTS D,PAYMENTS P, SYSTEM_CODES C,PRODUCTS PR,SYSTEM_CODES TP
WHERE S.ID_STUDENT = D.ID_STUDENT
AND D.ID_PAYMENT = P.ID_PAYMENT
AND D.ID_PRODUCT = PR.ID_PRODUCT 
AND PR.TYPE = C.IDSYSTEM_CODES
AND P.TYPE_PAYMENT = TP.IDSYSTEM_CODES
AND P.PAYDAY &gt;= :parm1
AND P.PAYDAY &lt;= :parm2 
AND (P.TYPE_PAYMENT = :parm3 OR  :parm3 =0)
GROUP BY P.PAYDAY , 
CONCAT(CONCAT(CONCAT(CONCAT(S.FIRST_NAME,' '),S.SURNAME),','),S.SURNAME2),
P.NUMBER_OF_TRANSFER,C.SYSTEM_COD_DESCRIPTION,TP.SYSTEM_COD_DESCRIPTION,D.COMMENT
ORDER BY P.PAYDAY DESC</sql-query>
 <sql-query name="SQL007">SELECT 
FORMAT(SUM(D.TAX+D.PAYMENT),2,'en_US') AS PAYMENT 
FROM  DETAIL_PAYMENTS D,PAYMENTS P
WHERE D.ID_PAYMENT = P.ID_PAYMENT
AND P.PAYDAY &gt;= :parm1
AND P.PAYDAY &lt;= :parm2
AND (P.TYPE_PAYMENT = :parm3 OR  :parm3 =0)
</sql-query>
 <sql-query name="SQL008">SELECT   CASE S.LAST_NAME WHEN  '' THEN 
 CONCAT(CONCAT(CONCAT(CONCAT(S.SURNAME,','),S.SURNAME2),','),S.FIRST_NAME)
 ELSE
CONCAT( CONCAT(CONCAT(CONCAT(CONCAT(CONCAT(S.SURNAME,','),S.SURNAME2),','),S.FIRST_NAME),' '),S.LAST_NAME) END AS NAME,
S.ID_STUDENT, 
IFNULL(LAST_PAID_MONTHY,''),
IFNULL(ANNUITY_DATE,''),
IF((YEAR(NOW()) - YEAR(_LAST_PAID_MONTHY))=0,(IF((MONTH(NOW()) - MONTH(_LAST_PAID_MONTHY) )&lt;=3,'SI','NO')),'NO') AS ACTIVE,
IF(MONTH(S.DAY_OF_INCOME) - MONTH(NOW())=0,'SI','NO') AS PENDING_PAYMENT_TUITIOM,
IF(DATEDIFF(ADDDATE(S.DAY_OF_INCOME,((YEAR(NOW()) - YEAR(S.DAY_OF_INCOME))*365)),LAST_PAID_NO_FORMAT)&gt;=-30 AND (DATEDIFF(ADDDATE(S.DAY_OF_INCOME,((YEAR(NOW()) -YEAR(S.DAY_OF_INCOME))*365)),LAST_PAID_NO_FORMAT)&lt;=0),'NO','SI')
 AS BOOLEAN_MONTHY_PAYMENT,
IF(
(DATEDIFF(ADDDATE(S.DAY_OF_INCOME,((YEAR(NOW()) - YEAR(S.DAY_OF_INCOME))*365)),ANNUITY_DATE_NO_FORMAT)&gt;=-335
 AND DATEDIFF(ADDDATE(S.DAY_OF_INCOME,((YEAR(NOW()) - YEAR(S.DAY_OF_INCOME))*365)),ANNUITY_DATE_NO_FORMAT)&lt;=0
 AND (
 (SELECT COUNT(D.ID_DETAIL_PAYMENTS)
FROM PAYMENTS P , DETAIL_PAYMENTS D,SYSTEM_CODES C,PRODUCTS PROD
WHERE D.ID_STUDENT=S.ID_STUDENT
AND P.ID_PAYMENT=D.ID_PAYMENT
AND D.ID_PRODUCT = PROD.ID_PRODUCT
AND PROD.TYPE = C.IDSYSTEM_CODES 
AND C.SUB_GROUP_DESCRIPTION ='MATRICULAS'
 ) &gt;= (YEAR(NOW()) -YEAR(S.DAY_OF_INCOME)) )
 ) ,'NO','SI'
 ) AS BOOLEAN_ANNUITY_DATE,
S.DAY_OF_INCOME AS DAY_OF_INCOME,
COALESCE(DATE_FORMAT(_LAST_PAID_MONTHY, '%Y%m%d'),'0') AS INT_LAST_PAID_MONTHY,
COALESCE(DATE_FORMAT(ANNUITY_DATE_NO_FORMAT, '%Y%m%d'),'0') AS INT_ANNUITY_DATE_NO_FORMAT
FROM STUDENT S LEFT OUTER JOIN (
SELECT DATE_FORMAT(MAX(P.PAYDAY), '%d/%m/%Y') AS  LAST_PAID_MONTHY,MAX(P.PAYDAY) as _LAST_PAID_MONTHY,D.ID_STUDENT,MAX(P.PAYDAY) AS LAST_PAID_NO_FORMAT 
FROM PAYMENTS P, DETAIL_PAYMENTS D,SYSTEM_CODES C,PRODUCTS PROD
WHERE P.ID_PAYMENT = D.ID_PAYMENT
AND D.ID_PRODUCT = PROD.ID_PRODUCT
AND PROD.TYPE = C.IDSYSTEM_CODES 
AND C.SUB_GROUP_DESCRIPTION ='CLASES'
GROUP BY D.ID_STUDENT
) T ON (S.ID_STUDENT =T.ID_STUDENT ),
STUDENT S2 LEFT OUTER JOIN  (SELECT DATE_FORMAT(MAX(P.PAYDAY), '%d/%m/%Y') AS ANNUITY_DATE,D.ID_STUDENT ,MAX(P.PAYDAY) AS ANNUITY_DATE_NO_FORMAT,
 DATE_FORMAT(MAX(P.PAYDAY), '%Y%m%d') AS LAST_PAID_INT
FROM PAYMENTS P, DETAIL_PAYMENTS D,SYSTEM_CODES C,PRODUCTS PROD
WHERE P.ID_PAYMENT = D.ID_PAYMENT
AND D.ID_PRODUCT = PROD.ID_PRODUCT
AND PROD.TYPE = C.IDSYSTEM_CODES 
AND C.SUB_GROUP_DESCRIPTION = 'MATRICULAS'
GROUP BY D.ID_STUDENT) T2 ON (S2.ID_STUDENT =T2.ID_STUDENT )
WHERE S2.ID_STUDENT = S.ID_STUDENT
ORDER BY NAME</sql-query>
 <sql-query name="SQL009">SELECT COUNT(1)
FROM 
(SELECT 
IF((YEAR(NOW()) - YEAR(_LAST_PAID_MONTHY))=0,(IF((MONTH(NOW()) - MONTH(T._LAST_PAID_MONTHY) )&lt;=3,'YES','NO')),'NO') AS ACTIVE
FROM STUDENT S ,(
SELECT D.ID_STUDENT,MAX(P.PAYDAY) AS _LAST_PAID_MONTHY 
FROM PAYMENTS P, DETAIL_PAYMENTS D,SYSTEM_CODES C,PRODUCTS PROD
WHERE P.ID_PAYMENT = D.ID_PAYMENT
AND D.ID_PRODUCT = PROD.ID_PRODUCT
AND PROD.TYPE = C.IDSYSTEM_CODES 
AND C.SUB_GROUP_DESCRIPTION ='CLASES'
GROUP BY D.ID_STUDENT
) T 
WHERE 
 (S.ID_STUDENT =T.ID_STUDENT )
 ) STATE_STUDENTS
 WHERE STATE_STUDENTS.ACTIVE ='YES'</sql-query>
 <sql-query name="SQL010">SELECT  
DATE_FORMAT(P.PAYDAY, '%d/%m/%Y') AS DAY_PAYMENT, 
CONCAT(CONCAT(CONCAT(CONCAT(S.FIRST_NAME,','),S.SURNAME),','),S.SURNAME2) AS NAME,
P.NUMBER_OF_TRANSFER AS RECEIPT_NUMBER,
C.SYSTEM_COD_DESCRIPTION AS TYPE_PRODUCT, 
TP.SYSTEM_COD_DESCRIPTION AS TYPE_PAYMENT,
FORMAT((D.TAX+D.PAYMENT),2,'en_US') AS PAYMENT_VIEW,
DATE_FORMAT(P.PAYDAY, '%Y%m%d') AS INT_DAY_PAYMENT 
FROM STUDENT S, DETAIL_PAYMENTS D,PAYMENTS P, SYSTEM_CODES C,PRODUCTS PR,SYSTEM_CODES TP
WHERE S.ID_STUDENT = D.ID_STUDENT
AND D.ID_PAYMENT = P.ID_PAYMENT
AND D.ID_PRODUCT = PR.ID_PRODUCT 
AND PR.TYPE = C.IDSYSTEM_CODES
AND P.TYPE_PAYMENT = TP.IDSYSTEM_CODES
AND P.PAYDAY &gt;= :parm1
AND P.PAYDAY &lt;= :parm2 
AND (PR.ID_PRODUCT = :parm3 OR :parm3 =0)
AND (S.ID_STUDENT =:parm4)</sql-query>
 <sql-query name="SQL011">SELECT CONCAT(CONCAT(CONCAT(CONCAT(S.FIRST_NAME,','),S.SURNAME),','),S.SURNAME2) AS NAME, 
DOC_ID AS DOC_ID,
ADDRESS AS ADDRESS,
c.SYSTEM_COD_DESCRIPTION AS CATEGORY,
S.MAIL_CONTACT,
S.TELEPHONE_CONTACT,
DATE_FORMAT(S.DAY_OF_INCOME, '%d/%m/%Y') AS REGISTRATION_DATE
FROM STUDENT S,SYSTEM_CODES C
WHERE S.ID_STUDENT=:parm1
AND S.CATEGORY = C.IDSYSTEM_CODES</sql-query>
 <sql-query name="SQL012">SELECT  
FORMAT(SUM(D.TAX+D.PAYMENT),2,'en_US') AS TOTAL_PAYMENT
FROM STUDENT S, DETAIL_PAYMENTS D,PAYMENTS P, SYSTEM_CODES C,PRODUCTS PR,SYSTEM_CODES TP
WHERE S.ID_STUDENT = D.ID_STUDENT
AND D.ID_PAYMENT = P.ID_PAYMENT
AND D.ID_PRODUCT = PR.ID_PRODUCT 
AND PR.TYPE = C.IDSYSTEM_CODES
AND P.TYPE_PAYMENT = TP.IDSYSTEM_CODES
AND P.PAYDAY &gt;= :parm1
AND P.PAYDAY &lt;= :parm2 
AND (PR.ID_PRODUCT = :parm3 OR :parm3 =0)
AND (S.ID_STUDENT =:parm4)</sql-query>
 <sql-query name="SQL013">SELECT T._YEAR, 
SUM(IF((
SELECT SYSTEM_CODE 
FROM SYSTEM_CODES 
WHERE IDSYSTEM_CODES=T.TYPE_PAYMENT)='PAGO003',T.TOTAL_YEAR,0)) AS ACH,
SUM(IF((
SELECT SYSTEM_CODE 
FROM SYSTEM_CODES 
WHERE IDSYSTEM_CODES=T.TYPE_PAYMENT)='PAGO002',T.TOTAL_YEAR,0)) AS _CHECK,
SUM(IF((
SELECT SYSTEM_CODE 
FROM SYSTEM_CODES 
WHERE IDSYSTEM_CODES=T.TYPE_PAYMENT)='PAGO001',T.TOTAL_YEAR,0)) AS CASH
FROM (
SELECT SUM(P.total_payment) AS TOTAL_YEAR,
DATE_FORMAT(P.PAYDAY,'%Y%m') AS _YEAR,
P.type_payment AS TYPE_PAYMENT
FROM PAYMENTS  P
WHERE P.PAYDAY &gt;=:parm1 AND 
      P.PAYDAY &lt;=:parm2
GROUP BY _YEAR,type_payment 
ORDER BY TOTAL_YEAR,TYPE_PAYMENT DESC
) T GROUP BY T._YEAR</sql-query>
 <sql-query name="SQL014">SELECT MIN(idsystem_codes) AS ID_GROUP ,sub_group_description AS DESCRIPTION
FROM system_codes 
where system_cod_group='PRODUCTS'  GROUP BY sub_group_description 
ORDER BY sub_group_description</sql-query>
</hibernate-mapping>
